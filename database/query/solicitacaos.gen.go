// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eufelipemateus/test-example/models"
)

func newSolicitacao(db *gorm.DB, opts ...gen.DOOption) solicitacao {
	_solicitacao := solicitacao{}

	_solicitacao.solicitacaoDo.UseDB(db, opts...)
	_solicitacao.solicitacaoDo.UseModel(&models.Solicitacao{})

	tableName := _solicitacao.solicitacaoDo.TableName()
	_solicitacao.ALL = field.NewAsterisk(tableName)
	_solicitacao.ID = field.NewUint(tableName, "id")
	_solicitacao.CreatedAt = field.NewTime(tableName, "created_at")
	_solicitacao.UpdatedAt = field.NewTime(tableName, "updated_at")
	_solicitacao.SolcicitaoTypeID = field.NewUint(tableName, "solcicitao_type_id")
	_solicitacao.Name = field.NewString(tableName, "name")
	_solicitacao.Email = field.NewString(tableName, "email")
	_solicitacao.Produto = field.NewString(tableName, "produto")
	_solicitacao.Descricao = field.NewString(tableName, "descricao")
	_solicitacao.SolicitacaoType = solicitacaoBelongsToSolicitacaoType{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SolicitacaoType", "models.SolicitacaoType"),
		Solicitacoes: struct {
			field.RelationField
			SolicitacaoType struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("SolicitacaoType.Solicitacoes", "models.Solicitacao"),
			SolicitacaoType: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SolicitacaoType.Solicitacoes.SolicitacaoType", "models.SolicitacaoType"),
			},
		},
	}

	_solicitacao.fillFieldMap()

	return _solicitacao
}

type solicitacao struct {
	solicitacaoDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	SolcicitaoTypeID field.Uint
	Name             field.String
	Email            field.String
	Produto          field.String
	Descricao        field.String
	SolicitacaoType  solicitacaoBelongsToSolicitacaoType

	fieldMap map[string]field.Expr
}

func (s solicitacao) Table(newTableName string) *solicitacao {
	s.solicitacaoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s solicitacao) As(alias string) *solicitacao {
	s.solicitacaoDo.DO = *(s.solicitacaoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *solicitacao) updateTableName(table string) *solicitacao {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.SolcicitaoTypeID = field.NewUint(table, "solcicitao_type_id")
	s.Name = field.NewString(table, "name")
	s.Email = field.NewString(table, "email")
	s.Produto = field.NewString(table, "produto")
	s.Descricao = field.NewString(table, "descricao")

	s.fillFieldMap()

	return s
}

func (s *solicitacao) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *solicitacao) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["solcicitao_type_id"] = s.SolcicitaoTypeID
	s.fieldMap["name"] = s.Name
	s.fieldMap["email"] = s.Email
	s.fieldMap["produto"] = s.Produto
	s.fieldMap["descricao"] = s.Descricao

}

func (s solicitacao) clone(db *gorm.DB) solicitacao {
	s.solicitacaoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s solicitacao) replaceDB(db *gorm.DB) solicitacao {
	s.solicitacaoDo.ReplaceDB(db)
	return s
}

type solicitacaoBelongsToSolicitacaoType struct {
	db *gorm.DB

	field.RelationField

	Solicitacoes struct {
		field.RelationField
		SolicitacaoType struct {
			field.RelationField
		}
	}
}

func (a solicitacaoBelongsToSolicitacaoType) Where(conds ...field.Expr) *solicitacaoBelongsToSolicitacaoType {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a solicitacaoBelongsToSolicitacaoType) WithContext(ctx context.Context) *solicitacaoBelongsToSolicitacaoType {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a solicitacaoBelongsToSolicitacaoType) Session(session *gorm.Session) *solicitacaoBelongsToSolicitacaoType {
	a.db = a.db.Session(session)
	return &a
}

func (a solicitacaoBelongsToSolicitacaoType) Model(m *models.Solicitacao) *solicitacaoBelongsToSolicitacaoTypeTx {
	return &solicitacaoBelongsToSolicitacaoTypeTx{a.db.Model(m).Association(a.Name())}
}

type solicitacaoBelongsToSolicitacaoTypeTx struct{ tx *gorm.Association }

func (a solicitacaoBelongsToSolicitacaoTypeTx) Find() (result *models.SolicitacaoType, err error) {
	return result, a.tx.Find(&result)
}

func (a solicitacaoBelongsToSolicitacaoTypeTx) Append(values ...*models.SolicitacaoType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a solicitacaoBelongsToSolicitacaoTypeTx) Replace(values ...*models.SolicitacaoType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a solicitacaoBelongsToSolicitacaoTypeTx) Delete(values ...*models.SolicitacaoType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a solicitacaoBelongsToSolicitacaoTypeTx) Clear() error {
	return a.tx.Clear()
}

func (a solicitacaoBelongsToSolicitacaoTypeTx) Count() int64 {
	return a.tx.Count()
}

type solicitacaoDo struct{ gen.DO }

type ISolicitacaoDo interface {
	gen.SubQuery
	Debug() ISolicitacaoDo
	WithContext(ctx context.Context) ISolicitacaoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISolicitacaoDo
	WriteDB() ISolicitacaoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISolicitacaoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISolicitacaoDo
	Not(conds ...gen.Condition) ISolicitacaoDo
	Or(conds ...gen.Condition) ISolicitacaoDo
	Select(conds ...field.Expr) ISolicitacaoDo
	Where(conds ...gen.Condition) ISolicitacaoDo
	Order(conds ...field.Expr) ISolicitacaoDo
	Distinct(cols ...field.Expr) ISolicitacaoDo
	Omit(cols ...field.Expr) ISolicitacaoDo
	Join(table schema.Tabler, on ...field.Expr) ISolicitacaoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISolicitacaoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISolicitacaoDo
	Group(cols ...field.Expr) ISolicitacaoDo
	Having(conds ...gen.Condition) ISolicitacaoDo
	Limit(limit int) ISolicitacaoDo
	Offset(offset int) ISolicitacaoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISolicitacaoDo
	Unscoped() ISolicitacaoDo
	Create(values ...*models.Solicitacao) error
	CreateInBatches(values []*models.Solicitacao, batchSize int) error
	Save(values ...*models.Solicitacao) error
	First() (*models.Solicitacao, error)
	Take() (*models.Solicitacao, error)
	Last() (*models.Solicitacao, error)
	Find() ([]*models.Solicitacao, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Solicitacao, err error)
	FindInBatches(result *[]*models.Solicitacao, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Solicitacao) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISolicitacaoDo
	Assign(attrs ...field.AssignExpr) ISolicitacaoDo
	Joins(fields ...field.RelationField) ISolicitacaoDo
	Preload(fields ...field.RelationField) ISolicitacaoDo
	FirstOrInit() (*models.Solicitacao, error)
	FirstOrCreate() (*models.Solicitacao, error)
	FindByPage(offset int, limit int) (result []*models.Solicitacao, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISolicitacaoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s solicitacaoDo) Debug() ISolicitacaoDo {
	return s.withDO(s.DO.Debug())
}

func (s solicitacaoDo) WithContext(ctx context.Context) ISolicitacaoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s solicitacaoDo) ReadDB() ISolicitacaoDo {
	return s.Clauses(dbresolver.Read)
}

func (s solicitacaoDo) WriteDB() ISolicitacaoDo {
	return s.Clauses(dbresolver.Write)
}

func (s solicitacaoDo) Session(config *gorm.Session) ISolicitacaoDo {
	return s.withDO(s.DO.Session(config))
}

func (s solicitacaoDo) Clauses(conds ...clause.Expression) ISolicitacaoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s solicitacaoDo) Returning(value interface{}, columns ...string) ISolicitacaoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s solicitacaoDo) Not(conds ...gen.Condition) ISolicitacaoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s solicitacaoDo) Or(conds ...gen.Condition) ISolicitacaoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s solicitacaoDo) Select(conds ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s solicitacaoDo) Where(conds ...gen.Condition) ISolicitacaoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s solicitacaoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISolicitacaoDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s solicitacaoDo) Order(conds ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s solicitacaoDo) Distinct(cols ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s solicitacaoDo) Omit(cols ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s solicitacaoDo) Join(table schema.Tabler, on ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s solicitacaoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s solicitacaoDo) RightJoin(table schema.Tabler, on ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s solicitacaoDo) Group(cols ...field.Expr) ISolicitacaoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s solicitacaoDo) Having(conds ...gen.Condition) ISolicitacaoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s solicitacaoDo) Limit(limit int) ISolicitacaoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s solicitacaoDo) Offset(offset int) ISolicitacaoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s solicitacaoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISolicitacaoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s solicitacaoDo) Unscoped() ISolicitacaoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s solicitacaoDo) Create(values ...*models.Solicitacao) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s solicitacaoDo) CreateInBatches(values []*models.Solicitacao, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s solicitacaoDo) Save(values ...*models.Solicitacao) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s solicitacaoDo) First() (*models.Solicitacao, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Solicitacao), nil
	}
}

func (s solicitacaoDo) Take() (*models.Solicitacao, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Solicitacao), nil
	}
}

func (s solicitacaoDo) Last() (*models.Solicitacao, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Solicitacao), nil
	}
}

func (s solicitacaoDo) Find() ([]*models.Solicitacao, error) {
	result, err := s.DO.Find()
	return result.([]*models.Solicitacao), err
}

func (s solicitacaoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Solicitacao, err error) {
	buf := make([]*models.Solicitacao, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s solicitacaoDo) FindInBatches(result *[]*models.Solicitacao, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s solicitacaoDo) Attrs(attrs ...field.AssignExpr) ISolicitacaoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s solicitacaoDo) Assign(attrs ...field.AssignExpr) ISolicitacaoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s solicitacaoDo) Joins(fields ...field.RelationField) ISolicitacaoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s solicitacaoDo) Preload(fields ...field.RelationField) ISolicitacaoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s solicitacaoDo) FirstOrInit() (*models.Solicitacao, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Solicitacao), nil
	}
}

func (s solicitacaoDo) FirstOrCreate() (*models.Solicitacao, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Solicitacao), nil
	}
}

func (s solicitacaoDo) FindByPage(offset int, limit int) (result []*models.Solicitacao, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s solicitacaoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s solicitacaoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s solicitacaoDo) Delete(models ...*models.Solicitacao) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *solicitacaoDo) withDO(do gen.Dao) *solicitacaoDo {
	s.DO = *do.(*gen.DO)
	return s
}
